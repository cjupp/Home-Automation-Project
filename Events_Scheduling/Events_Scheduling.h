/*--------------------------------------------------------------------------------------------------------------------
| events_scheduling.h: A series of objects and structures to be used with a real time clock. Creates, checks, and 
| executes scheduled events
|
| Created by:     Cameron Jupp
| Date Started:   December 23, 2022
--------------------------------------------------------------------------------------------------------------------*/ 

/* -------------------------------------------------------------------------------------------------------------------- |
| --------------------------------  / \  / /  / __  /  /__ __/  / ___/  / ____/ --------------------------------------- |
| -------------------------------  / /\\/ /  / /_/ /    / /    / __/    \__ \  ---------------------------------------- |
| ------------------------------  /_/  \_/  /_____/    /_/    /____/  /_____/ ----------------------------------------- |
| --------------------------------------------------------------------------------------------------------------------- |
| Last left off at:
|
| - add get/set functions for event object
|
| - add name string to eventHandler? (maybe for menus?)
|
| - finish commenting all of the functions
|
| --------------------------------------------------------------------------------------------------------------------- */

#include "Real_Timekeeping.h"

#ifndef EVENTS_SCHEDULING_H
#define EVENTS_SCHEDULING_H


// -------------------------------------------------------------------------------------------------------------------- //
// --------------------------- /    \   / ___/  / ___/  /_  _/  / \  / /  / ___/  / ____/ ----------------------------- //
// -------------------------- / /_\ /  / __/   / __/     / /   / /\\/ /  / __/    \__ \  ------------------------------ //
// ------------------------- /_____/  /____/  /_/      /___/  /_/  \_/  /____/  /_____/ ------------------------------- //
// -------------------------------------------------------------------------------------------------------------------- //
#define MAX_NAME_CHAR 10
#define MAX_EVENTS    10

#define SUN         BIT0
#define MON         BIT1
#define TUE         BIT2
#define WED         BIT3
#define THU         BIT4
#define FRI         BIT5
#define SAT         BIT6

#define EVERYDAY    BIT7



// -------------------------------------------------------------------------------------------------------------------- //
// --------------------------- / ___/  / /     /  \      / ____/  / ____/  / ___/  / ____/ ---------------------------- //
// -------------------------- / /__   / /__   / /_\\     \__ \    \__ \   / __/    \__ \  ----------------------------- //
// ------------------------- /____/  /____/  /_/   \\  /_____/  /_____/  /____/  /_____/ ------------------------------ //
// -------------------------------------------------------------------------------------------------------------------- //

/*-----------------------------------------------------------------------------------------------------------------------/ 
|--------------------------------------------------- EVENT CLASS -------------------------------------------------------/
|----------------------------------------------------------------------------------------------------------------------/
| Holds the basic parameters needed to trigger an event, as well as the function to be called when the scheduled time 
| hits
|        -------------------------------------------------------------------------------------------------------
| Notes/Future Changes:
| - 
|        -------------------------------------------------------------------------------------------------------
| Created by: Cameron Jupp
| Date:       December 24th, 2022
| Edited:     {Date}  
|-----------------------------------------------------------------------------------------------------------------------/
|----------------------------------------------------------------------------------------------------------------------/
|--------------------------------------------------------------------------------------------------------------------*/
class event
{
  public:

  char configd = 0;

  char name[MAX_NAME_CHAR];

  clkTime startTime;

  clkTime endTime;

  char weekDays = 0;

  char active = 0;

  void (*action)(char);

  void config(char * namePtr, clkTime time, clkTime endTime, char weekdays, void (*functPtr) (char));
  void del();
  void activate();
  void deactivate();

};


/*-----------------------------------------------------------------------------------------------------------------------/ 
|------------------------------------------------------ CLASS ----------------------------------------------------------/
|----------------------------------------------------------------------------------------------------------------------/
| Holds an array of events and checks to see if they need to be triggered. Polling or tasks must be configured by
| the user
|        -------------------------------------------------------------------------------------------------------
| Notes/Future Changes:
| - 
|        -------------------------------------------------------------------------------------------------------
| Created by: Cameron Jupp
| Date:       December 24th, 2022
| Edited:     {Date}  
|-----------------------------------------------------------------------------------------------------------------------/
|----------------------------------------------------------------------------------------------------------------------/
|--------------------------------------------------------------------------------------------------------------------*/
class eventHandler
{
  public:

  event events[MAX_EVENTS];

  char numConfigd = 0;

  char addEvent(char * name, clkTime time, clkTime endTime, char weekdays, void (*functPtr) (char));
  char deleteEvent(char delIndex);
  void orderEvents(char delIndex);
  void check(char currHour, char currMin, char currDay);
  
};

// -------------------------------------------------------------------------------------------------------------------- //
// -------------------  / ___/  / / //  / \  / /  / ___/ /__  __/  /_  _/  / __  /  / \  / /  / ____/ ----------------- //
// ------------------  / __/   / /_//  / /\\/ /  / /__     / /      / /   / /_/ /  / /\\/ /   \__ \ ------------------- //
// -----------------  /_/     /____/  /_/  \_/  /____/    /_/     /___/  /_____/  /_/  \_/  /_____/ ------------------- //
// -------------------------------------------------------------------------------------------------------------------- //

void printEvent(event * eventPtr);


#endif
